// This file is auto-generated by @hey-api/openapi-ts

export const LoginRequestSchema = {
    type: 'object',
    properties: {
        user_id: {
            type: 'string',
            description: 'User ID'
        },
        password: {
            type: 'string',
            description: 'Password'
        }
    },
    required: ['user_id', 'password']
} as const;

export const LoginResponseSchema = {
    type: 'object',
    properties: {
        status: {
            type: 'integer',
            example: 200
        },
        data: {
            type: 'object',
            properties: {
                token: {
                    type: 'string',
                    description: 'JWT token'
                },
                refreshToken: {
                    type: 'string',
                    description: 'Refresh token'
                }
            },
            required: ['token', 'refreshToken']
        },
        error: {
            type: 'object'
        }
    },
    required: ['status', 'data', 'error']
} as const;

export const RefreshRequestSchema = {
    type: 'object',
    properties: {
        refresh_token: {
            type: 'string',
            description: 'Refresh token'
        }
    },
    required: ['refresh_token']
} as const;

export const RefreshResponseSchema = {
    type: 'object',
    properties: {
        status: {
            type: 'integer',
            example: 200
        },
        data: {
            type: 'object',
            properties: {
                token: {
                    type: 'string',
                    description: 'JWT token'
                },
                refreshToken: {
                    type: 'string',
                    description: 'Refresh token'
                }
            },
            required: ['token', 'refreshToken']
        },
        error: {
            type: 'object'
        }
    },
    required: ['status', 'data', 'error']
} as const;

export const TagSchema = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            example: '12345678-1234-1234-1234-123456789012'
        },
        name: {
            type: 'string',
            example: 'momonga'
        }
    }
} as const;

export const BlogSchema = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            example: '12345678-1234-1234-1234-123456789012'
        },
        year: {
            type: 'integer',
            example: 2021
        },
        month: {
            type: 'integer',
            example: 1
        },
        day: {
            type: 'integer',
            example: 1
        },
        title: {
            type: 'string',
            example: 'momonga blog'
        },
        body: {
            type: 'string',
            example: 'momonga blog body'
        },
        is_show: {
            type: 'boolean',
            example: true
        },
        tags: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Tag'
            }
        },
        created_at: {
            type: 'string',
            example: '2021-01-01T00:00:00Z'
        },
        updated_at: {
            type: 'string',
            example: '2021-01-01T00:00:00Z'
        },
        deleted_at: {
            type: 'string',
            example: '2021-01-01T00:00:00Z'
        }
    }
} as const;

export const PagenationSchema = {
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64',
            example: 1
        },
        page: {
            type: 'integer',
            example: 1
        },
        limit: {
            type: 'integer',
            example: 10
        }
    },
    required: ['total', 'page', 'limit']
} as const;

export const BlogListResponseSchema = {
    type: 'object',
    properties: {
        status: {
            type: 'integer',
            example: 200
        },
        data: {
            type: 'object',
            properties: {
                blogs: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Blog'
                    }
                },
                pagenation: {
                    '$ref': '#/components/schemas/Pagenation'
                }
            },
            required: ['blogs', 'pagenation']
        },
        error: {
            type: 'object'
        }
    },
    required: ['status', 'data', 'error']
} as const;

export const BlogPostRequestSchema = {
    type: 'object',
    properties: {
        title: {
            type: 'string',
            description: 'title of the blog post',
            maxLength: 255,
            minLength: 1
        },
        body: {
            type: 'string',
            description: 'body of the blog post',
            minLength: 1
        },
        is_show: {
            type: 'boolean',
            description: 'whether the blog post is shown or not'
        },
        tag_uuids: {
            type: 'array',
            items: {
                type: 'string',
                description: 'uuids of the tags of the blog post',
                format: 'uuid'
            },
            description: 'tags of the blog post'
        }
    },
    required: ['title', 'body', 'is_show', 'tags']
} as const;

export const BlogResponseSchema = {
    type: 'object',
    properties: {
        status: {
            type: 'integer',
            example: 200
        },
        data: {
            type: 'object',
            properties: {
                blog: {
                    '$ref': '#/components/schemas/Blog'
                },
                tags: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Tag'
                    }
                }
            },
            required: ['blogs']
        },
        error: {
            type: 'object'
        }
    },
    required: ['status', 'data', 'error']
} as const;

export const BlogUpdateRequestSchema = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            description: 'uuid of the blog post',
            format: 'uuid'
        },
        title: {
            type: 'string',
            description: 'title of the blog post',
            maxLength: 255,
            minLength: 1
        },
        body: {
            type: 'string',
            description: 'body of the blog post',
            minLength: 1
        },
        is_show: {
            type: 'boolean',
            description: 'whether the blog post is shown or not'
        },
        tag_uuids: {
            type: 'array',
            items: {
                type: 'string',
                description: 'uuids of the tags of the blog post',
                format: 'uuid'
            },
            description: 'tags of the blog post'
        }
    },
    required: ['title', 'body', 'is_show', 'tags']
} as const;

export const TagListResponseSchema = {
    type: 'object',
    properties: {
        status: {
            type: 'integer',
            example: 200
        },
        data: {
            type: 'object',
            properties: {
                tags: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Tag'
                    }
                }
            },
            required: ['tags']
        },
        error: {
            type: 'object'
        }
    },
    required: ['status', 'data', 'error']
} as const;

export const TagCreateRequestSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Tag name'
        }
    },
    required: ['name']
} as const;