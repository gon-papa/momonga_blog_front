// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { LoginData, LoginError, LoginResponse2, LogoutError, LogoutResponse, RefreshTokenData, RefreshTokenError, RefreshTokenResponse, GetBlogListData, GetBlogListError, GetBlogListResponse, CreateBlogPostData, CreateBlogPostError, CreateBlogPostResponse, GetBlogData, GetBlogError, GetBlogResponse, UpdateBlogData, UpdateBlogError, UpdateBlogResponse, GetTagListData, GetTagListError, GetTagListResponse, CreateTagData, CreateTagError, CreateTagResponse, UploadImageData, UploadImageError, UploadImageResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Admin login
 * Admin login
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => { return (options?.client ?? client).post<LoginResponse2, LoginError, ThrowOnError>({
    ...options,
    url: '/api/login'
}); };

/**
 * Admin logout
 * Admin logout
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).post<LogoutResponse, LogoutError, ThrowOnError>({
    ...options,
    url: '/api/logout'
}); };

/**
 * Admin refresh token
 * Admin refresh token
 */
export const refreshToken = <ThrowOnError extends boolean = false>(options: Options<RefreshTokenData, ThrowOnError>) => { return (options?.client ?? client).post<RefreshTokenResponse, RefreshTokenError, ThrowOnError>({
    ...options,
    url: '/api/refresh'
}); };

/**
 * Get blog list
 * Get blog list
 */
export const getBlogList = <ThrowOnError extends boolean = false>(options?: Options<GetBlogListData, ThrowOnError>) => { return (options?.client ?? client).get<GetBlogListResponse, GetBlogListError, ThrowOnError>({
    ...options,
    url: '/api/admin/blog'
}); };

/**
 * Create blog post
 * Create blog post
 */
export const createBlogPost = <ThrowOnError extends boolean = false>(options: Options<CreateBlogPostData, ThrowOnError>) => { return (options?.client ?? client).post<CreateBlogPostResponse, CreateBlogPostError, ThrowOnError>({
    ...options,
    url: '/api/admin/blog'
}); };

/**
 * Get blog
 * Get blog
 */
export const getBlog = <ThrowOnError extends boolean = false>(options: Options<GetBlogData, ThrowOnError>) => { return (options?.client ?? client).get<GetBlogResponse, GetBlogError, ThrowOnError>({
    ...options,
    url: '/api/admin/blog/{uuid}'
}); };

/**
 * Update blog
 * Update blog
 */
export const updateBlog = <ThrowOnError extends boolean = false>(options: Options<UpdateBlogData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateBlogResponse, UpdateBlogError, ThrowOnError>({
    ...options,
    url: '/api/admin/blog/{uuid}'
}); };

/**
 * Get tag list
 * Get tag list
 */
export const getTagList = <ThrowOnError extends boolean = false>(options?: Options<GetTagListData, ThrowOnError>) => { return (options?.client ?? client).get<GetTagListResponse, GetTagListError, ThrowOnError>({
    ...options,
    url: '/api/admin/tags'
}); };

/**
 * Create tag
 * Create tag
 */
export const createTag = <ThrowOnError extends boolean = false>(options: Options<CreateTagData, ThrowOnError>) => { return (options?.client ?? client).post<CreateTagResponse, CreateTagError, ThrowOnError>({
    ...options,
    url: '/api/admin/tags'
}); };

/**
 * Admin image upload
 * Admin image upload
 */
export const uploadImage = <ThrowOnError extends boolean = false>(options: Options<UploadImageData, ThrowOnError>) => { return (options?.client ?? client).post<UploadImageResponse, UploadImageError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
        'Content-Type': null,
        ...options?.headers
    },
    url: '/api/admin/image/upload'
}); };